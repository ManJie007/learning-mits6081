Which registers contain arguments to functions? For example, which register holds 13 in main's call to printf?

        RVG Calling Convention
        The RISC-V calling convention passes arguments in registers when possible. 
        Up to eight integer registers, a0–a7, and up to eight floating-point registers, fa0–fa7, are used for this purpose.
        If the arguments to a function are conceptualized as fields of a C struct, each with pointer alignment, the argument registers are a shadow of the first eight pointer-words of that struct.
             If argument i < 8 is a floating-point type, it is passed in floating-point register fai; 
             otherwise, it is passed in integer register ai. 
        However, floating-point arguments that are part of unions or array fields of structures are passed in integer registers. 
        Additionally, floating-point arguments to variadic functions (except those that are explicitly named in the parameter list) are passed in integer registers.
        Arguments smaller than a pointer-word are passed in the least-significant bits of argument registers.
            Correspondingly, sub-pointer-word arguments passed on the stack appear in the lower addresses of a pointer-word, since RISC-V has a little-endian memory system.
        When primitive arguments twice the size of a pointer-word are passed on the stack, they are naturally aligned. 
            When they are passed in the integer registers, they reside in an aligned even-odd register pair, with the even register holding the least-significant bits. In RV32, for example, the function void foo(int, long long) is passed its first argument in a0 and its second in a2 and a3. Nothing is passed in a1.
        Arguments more than twice the size of a pointer-word are passed by reference.
        The portion of the conceptual struct that is not passed in argument registers is passed on the stack. The stack pointer sp points to the first argument not passed in a register.
        Values are returned from functions in integer registers a0 and a1 and floating-point registers fa0 and fa1. 
            Floating-point values are returned in floating-point registers only if they are primitives or members of a struct consisting of only one or two floating-point values. 
            Other return values that fit into two pointer-words are returned in a0 and a1. 
            Larger return values are passed entirely in memory; the caller allocates this memory region and passes a pointer to it as an implicit first parameter to the callee.
        In the standard RISC-V calling convention, the stack grows downward and the stack pointer is always kept 16-byte aligned.
        In addition to the argument and return value registers, seven integer registers t0–t6 and twelve floating-point registers ft0–ft11 are temporary registers that are volatile across calls and must be saved by the caller if later used. 
        Twelve integer registers s0–s11 and twelve floating-point registers fs0–fs11 are preserved across calls and must be saved by the callee if used. 
        Register   |    ABI Name      |         Description                       |     Saver
        x0         |    zero          |         Hard-wired zero                   |     
        x1         |    ra            |         Return address                    |     Caller
        x2         |    sp            |         Stack pointer                     |     Callee
        x3         |    gp            |         Global pointer                    |     
        x4         |    tp            |         Thread pointer                    |     
        x5-7       |    t0-2          |         Temporaries                       |     Caller
        x8         |    s0/fp         |         Saved register/frame pointer      |     Callee
        x9         |    s1            |         Saved register                    |     Callee
        x10-11     |    a0-1          |         Function arguments/return values  |     Caller
        x12-17     |    a2-7          |         Function arguments                |     Caller
        x18-27     |    s2-11         |         Saved registers                   |     Callee
        x28-31     |    t3-6          |         Temporaries                       |     Caller
        f0-7       |    ft0-7         |         FP temporaries                    |     Caller
        f8-9       |    fs0-1         |         FP saved registers                |     Callee
        f10-11     |    fa0-1         |         FP arguments/return values        |     Caller
        f12-17     |    fa2-7         |         FP arguments                      |     Caller
        f18-27     |    fs2-11        |         FP saved registers                |     Callee
        f28-31     |    ft8-11        |         FP temporaries                    |     Caller
        The soft-float calling convention is used on RV32 and RV64 implementations that lack floatingpoint hardware. It avoids all use of instructions in the F, D, and Q standard extensions, and hence the f registers.
        Integral arguments are passed and returned in the same manner as the RVG convention, and the stack discipline is the same. Floating-point arguments are passed and returned in integer registers, using the rules for integer arguments of the same size. In RV32, for example, the function double foo(int, double, long double) is passed its first argument in a0, its second argument in a2 and a3, and its third argument by reference via a4; its result is returned in a0 and a1. In RV64, the arguments are passed in a0, a1, and the a2-a3 pair, and the result is returned in a0.

```
  //user/call.asm
  24:	4635                	li	a2,13
```

Where is the call to function f in the assembly code for main? Where is the call to g? (Hint: the compiler may inline functions.)

由于 f 和 g 函数都被内联，我们看不到明确的 jal 或 jalr 指令来调用它们。相反，我们看到了结果的直接计算。
因此，可以确认编译器在优化过程中内联了这些函数。
在 main 函数的汇编代码中，f 函数的调用在第 26 行被内联，直接通过 `li a1, 12` 实现。
g 函数的调用被内联在 f 函数中，结果在 main 函数中体现为 `li a1, 12`，这是 f(8) + 1 的计算结果。

At what address is the function printf located?

  30:	00000097          	auipc	ra,0x0
  34:	5f8080e7          	jalr	1528(ra) # 628 <printf>
    auipc : 在risc-v 汇编语言中，auipc（add upper immediate to pc）指令用于将一个立即数添加到当前程序计数器（pc）的高位部分，然后将结果存储在一个目标寄存器中。这通常用于生成基于 pc 的地址，以便进行后续的地址计算或跳转。
    jalr : 在 RISC-V 汇编语言中，jalr（Jump And Link Register）指令用于无条件跳转到一个寄存器指定的地址，并将跳转前的下一条指令的地址（即返回地址）保存到一个目标寄存器中。
  0000000000000628 <printf>:
  
  void
  printf(const char *fmt, ...)
  {
   628:	711d                	addi	sp,sp,-96

What value is in the register ra just after the jalr to printf in main?

    在执行完 `jalr` 指令跳转到 `printf` 函数后，`ra` 寄存器中存储的是跳转指令的下一条指令的地址，也就是 `printf` 函数调用的下一条指令的地址。
    在提供的汇编代码中，`jalr` 指令的地址为 `34: 5f8080e7 jalr 1528(ra) # 628 <printf>`。指令的下一条地址是 `exit(0);` 的地址，即 `0x38`。
    因此，在 `ra` 寄存器中存储的值是 `0x38`。

Run the following code.

	unsigned int i = 0x00646c72;
	printf("H%x Wo%s", 57616, &i);
      
What is the output? Here's an ASCII table that maps bytes to characters.

Decimal: 575616 Hex is : 0xE110
小端：低位字节存放在低地址，高位字节存放在高地址。eg:0x12345678 mem:78, 56, 34, 12
大端：高位字节存放在低地址，低位字节存放在高地址。eg:0x12345678 mem:12, 34, 56, 78

0x64: 'd', 0x6c: 'l', 0x72: 'r'
little-endian: He110 World

The output depends on that fact that the RISC-V is little-endian. If the RISC-V were instead big-endian what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?

    set i = 0x726c6400
    The value 57616 in hexadecimal (e110) does not depend on endianness. Therefore, no change is needed for 57616.

Here's a description of little- and big-endian and a more whimsical description.

In the following code, what is going to be printed after 'y='? (note: the answer is not a specific value.) Why does this happen?

	printf("x=%d y=%d", 3);

    For the second %d, there is no provided argument. printf will then read whatever value happens to be next in memory, which could be any arbitrary value. This value is essentially unpredictable and depends on the state of the stack or register at that moment.
